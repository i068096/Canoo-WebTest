<?xml version="1.0" encoding="us-ascii"?>
<project
		name="CanooWebTest" default="develop" basedir="."
		xmlns:artifact="urn:maven-artifact-ant">
	<description>
		The ANT-Build file for building the Canoo Web Test
	</description>
	
	<!-- the build number is set by the build server in cruise.xml -->
	<property name="buildnumber" value="development"/>

	<property environment="env"/>
	<property name="maven-ant-tasks-jar" value="lib/build/maven-ant-tasks-2.1.3.custom.jar"/>

	<typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant">
		<classpath>
			<pathelement location="${maven-ant-tasks-jar}"/>
		</classpath>
	</typedef>
	<artifact:pom file="pom.xml" id="maven.project"/>

	<!-- must be an absolute path for checkstyle!!! -->
	<property name="src.main.dir" location="src/main/java"/>
	<property name="src.test.dir" location="src/test/java"/>
	<property name="deploy.dir" value="deploy"/>
	<property name="docs.dir" value="doc"/>
	<property name="clover.history.dir" location=".clover/history"/>
	<property name="clover.dir" location=".clover/clover_measure"/>
	<property name="clover.jar" location="lib/build/clover.jar"/>
	<property name="build.dir" location="build"/>
	<property name="build.runtime" location="${build.dir}/runtime"/>
	<property name="testlibs.dir" location="testlibs"/>
	<property name="build.main.classes" value="${build.dir}/classes"/>
	<property name="build.test.classes" value="${build.dir}/classes-test"/>
	<property name="build.generated" value="${build.main.classes}/generated"/>
	<property name="log.dir" value="${build.dir}/log"/>
	<property name="build.docs" value="${build.dir}/docs"/>
	<property name="javadoc.dir" value="${build.docs}/api"/>
	<property name="junitrep.dir" value="${build.dir}/test-reports"/>
	<property name="junitdoc.dir" value="${build.docs}/junit"/>
	<property name="cloverdoc.dir" value="${build.docs}/clover"/>
	<property name="installTest.dir" location="${build.dir}/installTest"/>

	<property name="testScript" value="TestSuite"/>

	<property file="server.properties"/>
	<property file="selftests/environment/server/localhost.properties"/>

	<path id="log4j.settings">
		<pathelement location="lib/log4j"/>
	</path>

	<fileset dir="." id="runtime.scripts">
		<include name="webtest.xml"/>
		<include name="tools/*.*"/>
		<include name="resources/**/*"/>
	</fileset>
	
	<target name="fetchDependencies"
			description="Fetch dependencies described in the POM."
			>
		<artifact:dependencies useScope="compile" pathId="path.pom.compile.id">
			<pom refid="maven.project"/>
		</artifact:dependencies>
		<artifact:dependencies useScope="test" pathId="path.pom.test.id">
			<pom refid="maven.project"/>
		</artifact:dependencies>

		<path id="webtestbuild.cp" description="All required libraries to build WebTest.">
			<pathelement location="lib"/>
		</path>

		<path id="webtestbase.cp" description="All required libraries to run WebTest.">
			<path refid="log4j.settings"/>
			<pathelement location="lib"/>
			<!-- lib before jars -->
			<fileset dir="lib" includes="**/*.jar"/>
			<!--
						<path refid="path.pom.compile.id"/>
						-->
			<path refid="path.pom.test.id"/>
		</path>

		<path id="webtestlib.cp" description="All libraries available.">
			<path refid="webtestbase.cp"/>
		</path>
		<!-- These are build-time dependencies, they should have their own pom -->
		<taskdef name="groovy" classname="org.codehaus.groovy.ant.Groovy" classpathref="webtestbase.cp" />
		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpathref="webtestbase.cp" />
	</target>

	<target name="assembleRuntime" depends="fetchDependencies"
			description="Puts together everything that's needed at run-time">
		<mkdir dir="${build.runtime}/lib"/>
		<artifact:dependencies useScope="compile" filesetId="fs.pom.compile.id">
			<pom refid="maven.project"/>
		</artifact:dependencies>
		<artifact:dependencies useScope="runtime" filesetId="fs.pom.runtime.id">
			<pom refid="maven.project"/>
		</artifact:dependencies>
		<copy todir="${build.runtime}/lib">
			<flattenmapper/>
			<fileset refid="fs.pom.compile.id"/>
			<fileset refid="fs.pom.runtime.id"/>
		</copy>
		<copy todir="${build.runtime}/lib">
			<fileset dir="lib/log4j/" includes="log4j.properties" />
			<fileset dir="lib" includes="*.xml"/>
		</copy>
		<path id="dependencies.cp">
			<fileset dir="${build.runtime}/lib" includes="**/*.jar"/>
		</path>
		<copy todir="${build.runtime}">
			<fileset refid="runtime.scripts"/>
		</copy>
	</target>

	<target name="assembleTestlibs" depends="fetchDependencies"
			description="Puts together everything that's needed for testing (point your IDE here) - run manually">
		<mkdir dir="${testlibs.dir}/lib"/>
		<artifact:dependencies useScope="test" filesetId="fs.pom.test.id">
			<pom refid="maven.project"/>
		</artifact:dependencies>
		<copy todir="${testlibs.dir}/lib">
			<flattenmapper/>
			<fileset refid="fs.pom.test.id"/>
		</copy>
	</target>

	<target name="develop"
			description="Incremental build and test"
			depends="checkUpToDates, -generateTaskdef, compile.plain, compile.clover, test"
			/>

	<target name="full"
			description="Full and clean build, inclusive reporting"
			depends="clean, develop, clover.report, deploy"
			/>

	<target name="clean" description="cleans all dirs from created files">
		<echo>cleaning ...</echo>
		<delete dir="${build.dir}" includeEmptyDirs="true" quiet="true"/>
		<delete dir="${deploy.dir}" includeEmptyDirs="true" quiet="true"/>
		<mkdir dir="${build.dir}"/>
		<mkdir dir="${deploy.dir}"/>
	</target>

	<target name="compile.plain" unless="no.plain.code.changes">
		<antcall target="-compile.main.and.test">
			<param name="plain.or.clover" value="plain"/>
		</antcall>

		<tstamp/>
		<jar
				destfile="${build.dir}/AppletScenarii.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/*/*Scenario.class"
				excludes="com/canoo/webtest/extension/applet/runner/AbstractScenario.class"
				filesonly="true"
				/>
		<jar
				destfile="${build.dir}/AwtApplet.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/awt/"
				filesonly="true"
				/>
		<jar
				destfile="${build.dir}/SwingApplet.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/swing/"
				filesonly="true"
				/>
		<jar
				destfile="${build.dir}/JemmyApplet.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/jemmy/"
				filesonly="true"
				/>
		<jar
				destfile="${build.dir}/ParameterApplet.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/parameter/"
				filesonly="true"
				/>
		<jar
				destfile="${build.dir}/CookieApplet.jar"
				basedir="${build.test.classes}/plain"
				includes="com/canoo/webtest/extension/applet/cookie/"
				excludes="com/canoo/webtest/extension/applet/cookie/ShowHeaders.class"
				filesonly="true"
				/>
		<jar destfile="${build.dir}/Selftests.jar" description="The jar to deploy in the selftest webapp"
			 basedir="${build.test.classes}/plain" filesonly="true">
			<include name="**/*Servlet.class"/>
			<include name="com/canoo/webtest/extension/applet/cookie/ShowHeaders.class"/>
		</jar>
		<jar
				destfile="${deploy.dir}/plain/webtest_T.jar"
				filesonly="true"
				comment="${buildnumber}, ${TODAY}"
				>
			<fileset dir="${build.test.classes}/plain">
				<include name="com/canoo/"/>
			</fileset>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${TODAY}"/>
				<attribute name="Build-Number" value="${buildnumber}"/>
				<attribute name="Implementation-Title" value="Canoo Webtest"/>
				<attribute name="Implementation-Version" value="${buildnumber}"/>
				<attribute name="Implementation-URL" value="http://webtest.canoo.com/"/>
			</manifest>
		</jar>
	</target>

	<target name="compile.clover" depends="clover.setup" if="clover.present" unless="no.clover.code.changes">
		<clover-clean keepdb="false" verbose="true"/>

		<antcall target="-compile.main.and.test">
			<param name="plain.or.clover" value="clover"/>
		</antcall>
	</target>

	<target name="clover.present">
		<condition property="clover.present">
			<and>
				<isfalse value="${skip.clover}"/>
				<available resource="clovertasks"/>
				<!-- should be in clover.jar -->
			</and>
		</condition>
	</target>

	<target name="clover.warning" depends="clover.present" unless="clover.present">
		<echo>Clover not used:
			either skip.clover is true (${skip.clover}),
			or one of clover.jar or clover.license is not on the classpath.
			Building/Testing will use 'plain/webtest.jar'
		</echo>
	</target>

	<target name="clover.init" depends="clover.warning" if="clover.present">
 		<taskdef resource="cloverlib.xml" classpath="${clover.jar}"/>

		<property name="clover.flush.interval.ms" value="2000"/>
	</target>

	<patternset id="applet.scenario.pattern">
		<!-- Test applets and scenarii, the applet run-time does not have access to clover -->
		<exclude name="com/canoo/webtest/extension/applet/awt/"/>
		<exclude name="com/canoo/webtest/extension/applet/swing/"/>
		<exclude name="com/canoo/webtest/extension/applet/jemmy/Applet.java"/>
		<exclude name="com/canoo/webtest/extension/applet/jemmy/*Scenario.java"/>
		<exclude name="com/canoo/webtest/extension/applet/cookie/Applet.java"/>
		<exclude name="com/canoo/webtest/extension/applet/cookie/*Scenario.java"/>
		<exclude name="com/canoo/webtest/extension/applet/parameter/"/>
	</patternset>

	<patternset id="clover.pattern">
		<exclude name="**/*Servlet.java"/>
		<!-- is the selftest dummy-->
		<exclude name="**/security/*"/>
		<exclude name="**/boundary/*"/>
		<exclude name="**/self/ThrowAssert.java"/>
		<!-- is used to make better statistics possible, remove later -->
		<exclude name="**/*AllTests.java"/>
		<patternset refid="applet.scenario.pattern"/>
	</patternset>

	<target name="clover.setup" depends="clover.init" if="clover.present">
		<mkdir dir="${clover.dir}"/>
		<clover-setup
				initString="${clover.dir}/webtest_unit_coverage.db"
				flushpolicy="interval"
				flushinterval="${clover.flush.interval.ms}"
				preserve="false"
				tmpdir="${clover.dir}"
				>
			<fileset dir="${src.main.dir}">
				<patternset refid="clover.pattern"/>
			</fileset>
			<fileset dir="${src.test.dir}">
				<patternset refid="clover.pattern"/>
			</fileset>
		</clover-setup>
	</target>

	<!-- need 2nd target, in order to setup and compile within the same scope without any intermediate antcall -->
        <target name="clover.setup.ifneeded" depends="clover.init" if="clover.compile.yes">
                <mkdir dir="${clover.dir}"/>
                <clover-setup
                                initString="${clover.dir}/webtest_unit_coverage.db"
                                flushpolicy="interval"
                                flushinterval="${clover.flush.interval.ms}"
                                preserve="false"
                                tmpdir="${clover.dir}"
                                >
                        <fileset dir="${src.main.dir}">
                                <patternset refid="clover.pattern"/>
                        </fileset>
                        <fileset dir="${src.test.dir}">
                                <patternset refid="clover.pattern"/>
                        </fileset>
                </clover-setup>
        </target>

	<target name="clover.report" depends="clover.init" unless="no.clover.report.required" if="clover.present">
		<sleep milliseconds="${clover.flush.interval.ms}"/>
		<!-- wait until all data was written -->
		<clover-historypoint historyDir="${clover.history.dir}">
			<fileset dir="${src.main.dir}">
				<patternset refid="clover.pattern"/>
			</fileset>
			<fileset dir="${src.test.dir}">
				<patternset refid="clover.pattern"/>
			</fileset>
		</clover-historypoint>

		<clover-report>
			<current outfile="${cloverdoc.dir}" title="Canoo WebTest">
				<format type="html" filter="@deprecated"/>
				<fileset dir="${src.main.dir}">
					<patternset refid="clover.pattern"/>
				</fileset>
				<fileset dir="${src.test.dir}">
					<patternset refid="clover.pattern"/>
				</fileset>
			</current>
		</clover-report>

		<!--
				  Only attempts clover history if there are sufficient data:
				  Generates a path with all the history files and assert that there is at least one path separator, hence
				two history files.
				  -->
		<pathconvert targetos="windows" property="history.files">
			<map from="${clover.history.dir}/" to=""/>
			<path>
				<fileset dir="${clover.history.dir}/"/>
			</path>
		</pathconvert>
		<condition property="clover.history.present">
			<contains string="${history.files}" substring=";"/>
		</condition>
		<antcall target="clover.report.history"/>
	</target>

	<target name="clover.report.history" if="clover.history.present">
		<clover-report failOnError="true">
			<historical title="Canoo WebTest"
						outfile="${cloverdoc.dir}"
						historyDir="${clover.history.dir}">
				<movers/>
				<coverage/>
				<metrics include="statements, methods, classes"/>
				<format type="html"/>
			</historical>
		</clover-report>
	</target>

	<target name="clover.view" depends="clover.setup" description="show clover console" if="clover.present">
		<clover-view/>
	</target>

	<!--  ===================================================================== -->
	<!--  Generate info required before compile                                 -->
	<!--  ===================================================================== -->
	<macrodef name="buildtaskdef">
		<attribute name="includes"/>
		<attribute name="excludes" default="**/*Test.java"/>
		<!-- extra excludes -->
		<attribute name="kind" default=""/>
		<sequential>
			<templatedoclet destdir="${build.dir}">
				<fileset dir="${src.main.dir}">
					<include name="@{includes}"/>
					<exclude name="@{excludes}"/>
				</fileset>
				<template
						havingClassTag="webtest.step"
						templateFile="doc/xdoclet/taskdef.xdt"
						destinationfile="webtest_@{kind}relaxed_raw.taskdef"
						/>
				<template
						havingClassTag="webtest.step"
						templateFile="doc/xdoclet/taskdef_strict.xdt"
						destinationfile="webtest_@{kind}strict_raw.taskdef"
						/>
			</templatedoclet>
			<antcall target="-postProcessTaskdef">
				<param name="taskdef_kind" value="@{kind}relaxed"/>
			</antcall>
			<antcall target="-postProcessTaskdef">
				<param name="taskdef_kind" value="@{kind}strict"/>
			</antcall>
		</sequential>
	</macrodef>

	<macrodef name="buildantlib">
		<attribute name="kind" default=""/>
		<sequential>
			<var name="plugindir" value="${build.generated}/com/canoo/webtest/plugins/@{kind}"/>
			<templatedoclet destdir="${plugindir}">
				<fileset dir="${src.main.dir}">
					<include name="com/canoo/webtest/plugins/@{kind}/*.java"/>
				</fileset>
				<template havingClassTag="webtest.step"
						  templateFile="doc/xdoclet/antlib.xdt"
						  destinationfile="antlib_raw.xml"/>
			</templatedoclet>
			<antcall target="-postProcessAntlib"/>
			<delete quiet="true">
				<fileset dir="${plugindir}" includes="antlib_raw.xml"/>
			</delete>
		</sequential>
	</macrodef>

	<target name="-generateTaskdef" depends="fetchDependencies" unless="no.code.changes">
		<mkdir dir="${build.generated}"/>
		<taskdef name="templatedoclet" classname="xdoclet.DocletTask" classpathref="webtestbase.cp"/>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="webtestbase.cp"/>
		<buildtaskdef includes="**/*.java"/>
		<buildtaskdef kind="base_" includes="**/*.java" excludes="**/plugins/**/*.java"/>
		<for param="plugindir">
			<path>
				<dirset dir="${src.main.dir}/com/canoo/webtest/plugins/" includes="*"/>
			</path>
			<sequential>
				<basename property="plugin" file="@{plugindir}"/>
				<buildtaskdef kind="${plugin}_" includes="**/plugins/${plugin}/*.java"/>
				<buildantlib kind="${plugin}"/>
				<var name="plugin" value="" unset="true"/>
			</sequential>
		</for>

		<delete quiet="true">
			<fileset dir="${build.dir}" includes="*_raw.taskdef"/>
		</delete>
	</target>

	<target name="-postProcessTaskdef">
		<groovy>
			target = new File(properties['build.dir'])
			taskdef_kind = properties['taskdef_kind']
			new File(target, 'webtest_' + taskdef_kind + '.taskdef').withWriter { out ->
			out = new PrintWriter(out)
			new File(target, 'webtest_' + taskdef_kind + '_raw.taskdef').eachLine { line ->
			if (line.startsWith("#")) {
			out.println line
			return
			}
			line = line.replaceAll(/\s+/, '')
			if (!line.size()) return
			assert line =~ /^\w+\:\w+/
			out.println line
			}
			}
		</groovy>
	</target>

	<target name="-postProcessAntlib">
		<groovy>
			prefix = properties['plugin']
			if (prefix.endsWith('test')) {
			prefix -= 'test'
			}
			target = new File(properties['plugindir'] + '/antlib.xml')
			source = new File(properties['plugindir'] + '/antlib_raw.xml')
			target.withWriter { out ->
			out = new PrintWriter(out)
			source.eachLine { line ->
			if (!line.contains("taskdef name=")) {
			out.println line
			return
			}
			matcher = line =~ /(.*taskdef name=")${prefix}([A-Z])(.*)/
			out.println matcher[0][1] + matcher[0][2].toLowerCase() + matcher[0][3]
			}
			}
		</groovy>
	</target>

	<!--  ===================================================================== -->
	<!--  Compiles the source code and jars it                                  -->
	<!--  ===================================================================== -->
	<target name="-compile.main.and.test">
		<echo message="compile main classes"/>
		<antcall target="-compile.jar">
			<param name="build.classes" value="${build.main.classes}"/>
			<param name="src.dir" value="${src.main.dir}"/>
		</antcall>
		<echo message="compile test classes"/>
		<antcall target="-compile">
			<param name="build.classes" value="${build.test.classes}"/>
			<param name="src.dir" value="${src.test.dir}"/>
		</antcall>
	</target>

	<target name="clover.decide">
		<condition property="clover.compile.yes">
			<equals arg1="${plain.or.clover}" arg2="clover"/>
		</condition>
		<echo message="decided to use clover: ${clover.decide.yes}"/>
	</target>

	<target name="-compile" depends="fetchDependencies,clover.decide,clover.setup.ifneeded">
		<mkdir dir="${build.classes}/${plain.or.clover}"/>
		<mkdir dir="${deploy.dir}/${plain.or.clover}"/>
		<echo message="compile base classes"/>
		<groovyc srcdir="${src.dir}" destdir="${build.classes}/${plain.or.clover}">
			<classpath>
				<path refid="webtestbase.cp"/>
				<path location="${build.main.classes}/${plain.or.clover}"/>
			</classpath>
			<javac debug="on" deprecation="off"
				   encoding="ISO-8859-1"
				   source="1.6"
				   target="1.6"
					>
			</javac>
		</groovyc>
	</target>

	<target name="-compile.jar" depends="-compile">
		<tstamp/>
		<jar
				destfile="${deploy.dir}/${plain.or.clover}/webtest.jar"
				filesonly="true"
				comment="${buildnumber}, ${TODAY}"
				>
			<fileset dir="${build.classes}/${plain.or.clover}">
				<include name="com/canoo/**"/>
			</fileset>
			<fileset dir="${build.generated}">
				<include name="com/canoo/**"/>
			</fileset>
			<fileset dir="${build.dir}" includes="webtest*.taskdef" excludes="webtest*raw.taskdef"/>
			<zipfileset dir="${build.dir}" includes="webtest_relaxed.taskdef" fullpath="webtest.taskdef"/>
			<zipfileset dir="tools" prefix="com/canoo/webtest/resources/tools"/>
			<zipfileset dir="resources" prefix="com/canoo/webtest/resources/resources">
				 <include name="images/*.*"/>
				 <include name="responseBrowser*.*"/>
				 <include name="index-testsRunning.html"/>
				 <include name="*.js"/>
				 <include name="*.css"/>
				 <include name="*.xsl"/>
			</zipfileset>
			<zipfileset dir="." includes="webtest.xml" prefix="com/canoo/webtest/resources"/>
			<manifest>
				<attribute name="Build-By" value="${user.name}"/>
				<attribute name="Build-Date" value="${TODAY}"/>
				<attribute name="Build-Number" value="${buildnumber}"/>
				<attribute name="Implementation-Title" value="Canoo Webtest"/>
				<attribute name="Implementation-Version" value="${buildnumber}"/>
				<attribute name="Implementation-URL" value="http://webtest.canoo.com/"/>
			</manifest>
		</jar>
	</target>

	<!--  ===================================================================== -->
	<!--  Runs the test code                                                    -->
	<!--  ===================================================================== -->

	<target name="test" description="runs unit and functional tests">
		<antcall target="unitTest"/>
		<antcall target="functionalTest"/>
	</target>

	<target name="test.init" depends="fetchDependencies, clover.present">
		<condition property="clover.or.plain" value="clover" else="plain">
			<and>
				<isset property="clover.present"/>
				<available file="${deploy.dir}/clover/webtest.jar" type="file"/>
			</and>
		</condition>

		<path id="webtestjar.cp">
			<pathelement location="${deploy.dir}/${clover.or.plain}/webtest.jar"/>
			<pathelement location="${build.test.classes}/${clover.or.plain}"/>
		</path>

		<path id="junit.rt.cp">
			<path id="junit.cp">
				<pathelement path="src/test/resources"/>
				<path refid="webtestbase.cp"/>
			</path>
			<path refid="log4j.settings"/>
			<path refid="webtestjar.cp"/>
			<fileset dir="${build.dir}" includes="*.jar"/>
		</path>
		<mkdir dir="${log.dir}"/>
	</target>

	<target name="unitTest" depends="unitTest.single,unitTest.batch" description="run the unitTests"/>

	<target name="unitTest.single" depends="test.init" if="testClass">
		<junit printsummary="false" haltonfailure="yes" fork="yes" dir="${basedir}" includeantruntime="no">
			<test name="${testClass}" todir="${junitrep.dir}"/>
			<formatter type="brief" usefile="false"/>
			<classpath refid="junit.rt.cp"/>
		</junit>
	</target>

	<target name="unitTest.batch" depends="test.init" unless="testClass">
		<property name="junitTestReport.file" value="TestReport.xml"/>
		<echo message="Unit test report will be generated in ${log.dir}/${junitTestReport.file}"/>

		<delete dir="${junitrep.dir}" includeEmptyDirs="true"/>
		<mkdir dir="${junitrep.dir}"/>

		<junit
				printsummary="yes" haltonfailure="no" failureproperty="junit.failed"
				fork="yes" forkmode="once" dir="${basedir}" includeantruntime="no"
				>
			<jvmarg value="-Xmx256M"/>
			<sysproperty key="log4j.defaultInitOverride" value="false"/>
			<sysproperty key="log4j.configuration" value="log4j.junit.xml"/>
			<sysproperty key="log.dir" path="${log.dir}"/>

			<batchtest todir="${junitrep.dir}">
				<!-- execute the unit tests against webtest.jar, which only contains com/canoo -->
				<!-- the plain classes are always up-to-date -->
				<fileset dir="${build.test.classes}/plain">
					<include name="com/canoo/**/*Test.class"/>
					<!-- exclude abstract test classes (perhaps should we rename them) -->
					<exclude name="com/canoo/**/NameValuePairTest.class"/>
					<exclude name="com/canoo/webtest/steps/form/AbstractSetFieldStepTest.class"/>
					<exclude name="com/canoo/webtest/steps/verify/AbstractVerifyFormTest.class"/>
					<exclude name="com/canoo/webtest/extension/applet/runner/ScenarioRunnerTest.class"/>
				</fileset>
			</batchtest>
			<batchtest todir="${junitrep.dir}">
				<fileset dir="${build.test.classes}/plain">
					<include name="com/canoo/webtest/extension/applet/runner/ScenarioRunnerTest.class"/>
				</fileset>
			</batchtest>
			<formatter type="xml"/>
			<classpath refid="junit.rt.cp"/>
		</junit>
		<junitreport todir="${log.dir}" tofile="${junitTestReport.file}">
			<fileset dir="${junitrep.dir}" includes="TEST-*.xml"/>
			<report format="frames" todir="${junitdoc.dir}"/>
		</junitreport>
		<property name="junit.report.index" location="${junitdoc.dir}/index.html" description="file with full path"/>
		<fail if="junit.failed">One or more junit tests failed (see result report in ${junit.report.index}).</fail>
	</target>

	<target name="isSelftestServerAlreadyRunning">
		<echo message="Looking if server is running"/>
		<waitfor maxwait="2" maxwaitunit="second" timeoutproperty="selftestServerNotAlreadyRunning">
			<http url="${webtest.protocol}://${webtest.host}:${webtest.port}/${webapp.name}/index.html"/>
		</waitfor>
	</target>

	<target name="stopSelftestServer" depends="isSelftestServerAlreadyRunning" unless="selftestServerNotAlreadyRunning">
		<echo message="Stoping server"/>
		<ant dir="jetty" antfile="jetty.xml" target="stop">
			<property name="log.dir" location="${log.dir}"/>
		</ant>
		<sleep seconds="2"/>
	</target>

	<target name="functionalTest"
			depends="deploySelf"
			description="run the functional tests against provided installation"
			>
		<!-- delete stray results from previous run - tests using default values relative to selftests/tests src dir -->
		<delete includeEmptyDirs="true" quiet="true">
			<fileset dir="selftests/webtest-results"/>
			<fileset dir="selftests" includes="response_*.*"/>
		</delete>
		<antcall target="runWebappAgainstJetty">
			<param name="webapp.name" value="selftest"/>
			<param name="test.target" value="-launchWebTest"/>
			<param name="webtest.home" value="${build.runtime}"/>
		</antcall>
	</target>

	<target name="deploySelf" description="Wars the selftest">
		<!-- some jars are needed in the WebApp -->
		<artifact:dependencies filesetId="webapp.libs">
			<dependency groupId="commons-fileupload" artifactId="commons-fileupload" version="1.2"/>
			<dependency groupId="commons-io" artifactId="commons-io" version="1.3"/>
			<dependency groupId="commons-codec" artifactId="commons-codec" version="1.3"/>
		</artifact:dependencies>

		<!-- copy to flatten path (better solution?) -->
		<copy todir="${build.dir}">
			<fileset refid="webapp.libs"/>
			<mapper type="flatten"/>
		</copy>

		<war destfile="${deploy.dir}/selftest.war"
			 webxml="selftests/webapp/WEB-INF/web.xml"
			 filesonly="true"
				>
			<fileset dir="${build.dir}" includes="*Applet.jar"/>
			<fileset dir="selftests/webapp" excludes="WEB-INF/web.xml"/>
			<fileset dir="${docs.dir}/info/"/>
			<fileset dir="${docs.dir}/samples" includes="*.js, images/*"/>
			<!-- do not use clover on selftest server -->
			<lib dir="${build.dir}">
				<include name="Selftests.jar"/>
				<include name="commons-fileupload*.jar"/>
				<include name="commons-io*.jar"/>
				<include name="commons-codec*.jar"/>
			</lib>
		</war>
		<!-- make the ajaxtags demo war available as its own webapp -->
		<unwar src="selftests/ajaxtags-1.2-beta2.war" dest="${deploy.dir}/ajaxtags"/>
	</target>

	<target name="runWebappAgainstJetty" depends="test.init">
		<property name="test.suite" value="${webapp.name}s"/>
		<property name="resultpath" location="${build.dir}/${test.suite}/reports"/>
		<echo message="Result path will be: ${resultpath}"/>

		<antcall target="stopSelftestServer"/>
		<property name="selftest.witness" location="${webapp.name}Running.txt"/>
		<parallel failonany="true">
			<ant dir="jetty" antfile="jetty.xml" target="start">
				<property name="log.dir" location="${log.dir}"/>
				<property name="webapp.dir" location="${deploy.dir}"/>
			</ant>
			<sequential>
				<waitfor maxwait="60" maxwaitunit="second" timeoutproperty="selftestServerNotRunning">
					<http url="${webtest.protocol}://${webtest.host}:${webtest.port}/${webapp.name}/index.html"/>
				</waitfor>
				<fail if="selftestServerNotRunning">Selftest server for ${test.suite} is not available.</fail>

				<antcall target="${test.target}"/>

				<ant dir="jetty" antfile="jetty.xml" target="stop">
					<property name="log.dir" location="${log.dir}"/>
				</ant>
			</sequential>
		</parallel>
		<!-- make available for merge -->
		<copy file="${resultpath}/WebTestOverview.xml" tofile="${log.dir}/${webapp.name}Report.xml"/>

		<available property="selftest.witness.present" file="${selftest.witness}"/>
		<fail if="selftest.witness.present">The selftests failed (look at ${log.dir}/${webapp.name}Report.xml)!</fail>
	</target>

	<target name="-launchWebTest" depends="assembleRuntime">
		<copy todir="${build.runtime}/lib">
			<fileset dir="${deploy.dir}/${clover.or.plain}/"/>
		</copy>
		<!-- partial duplicate of webtest.sh -->
		<java
				classname="org.apache.tools.ant.launch.Launcher"
				fork="true"
				dir="${test.suite}"
				maxmemory="128m"
				failonerror="true"
			>
			<classpath>
				<path refid="log4j.settings"/>
				<pathelement location="${build.runtime}/lib/ant-launcher-1.8.4.jar"/>
			</classpath>
			<sysproperty key="buildnumber" value="${buildnumber}"/>
			<sysproperty key="testScript" value="${testScript}"/>
			<sysproperty key="selftest.witness" value="${selftest.witness}"/>
			<sysproperty key="ant.XmlLogger.stylesheet.uri" value=""/>
			<sysproperty key="webtest.home" value="${webtest.home}"/>
			<sysproperty key="wt.config.resultpath" value="${resultpath}"/>
			<sysproperty key="wt.headless" value="yep"/>
			<!--   <jvmarg line="-Xrunyjpagent:quiet" />        profiling only -->
			<arg value="-lib"/>
			<arg path="lib/build:lib/build/clover.jar"/>
			<arg line="-logger org.apache.tools.ant.XmlLogger"/>
			<arg value="-logfile"/>
			<arg path="${log.dir}/${webapp.name}.console.log.xml"/>
		</java>
	</target>

	<!--  ===================================================================== -->
	<!--  This indicates whether we have to run a target.                       -->
	<!--  Check whether sources changed.                                        -->
	<!--  This is done by looking whether any of the source files               -->
	<!--  are younger than the artefact that gets created after a successful    -->
	<!--  compile.                                                              -->
	<!--  The property "no.xxx.changes" is set to "true" otherwise.             -->
	<!--  ===================================================================== -->

	<target name="checkUpToDates" depends="checkForJavadocChanges">
		<uptodate property="no.plain.code.changes" targetfile="${deploy.dir}/plain/webtest.jar">
			<srcfiles dir="${src.main.dir}" includes="**/*.java"/>
			<srcfiles dir="${src.test.dir}" includes="**/*.java"/>
			<srcfiles dir="." includes="build.xml"/>
		</uptodate>

		<uptodate property="no.clover.code.changes" targetfile="${deploy.dir}/clover/webtest.jar">
			<srcfiles dir="${src.main.dir}" includes="**/*.java"/>
			<srcfiles dir="${src.test.dir}" includes="**/*.java"/>
			<srcfiles dir="." includes="build.xml"/>
		</uptodate>

		<condition property="no.code.changes">
			<and>
				<isset property="no.plain.code.changes"/>
				<isset property="no.clover.code.changes"/>
			</and>
		</condition>

		<condition property="no.clover.report.required">
			<and>
				<available file="${cloverdoc.dir}" type="dir"/>
				<isset property="no.clover.code.changes"/>
				<uptodate targetfile="${deploy.dir}/clover/webtest.jar">
					<srcfiles dir="selftests/tests" includes="**/*"/>
				</uptodate>
			</and>
		</condition>
	</target>

	<target name="checkForJavadocChanges">
		<uptodate property="no.javadoc.changes" targetfile="${javadoc.dir}/index.html">
			<srcfiles dir="${src.main.dir}" includes="**/*.java, **/package.html"/>
			<srcfiles dir="." includes="build.xml"/>
		</uptodate>
	</target>

	<!--  ===================================================================== -->
	<!--  Deploy the application for distribution via web server                -->
	<!--  ===================================================================== -->

	<target name="deploy" description="construct the doc, zip and deploy"
			depends="manuals, apidoc, zip, package, deployWeb"/>

	<target name="manuals" description="call the manual build" depends="test.init">
		<property name="manuals.witness" location="${build.dir}/manualsRunning.txt"/>
		<property name="logFile" value="${log.dir}/manuals.console.log.xml"/>
		<echo message="Generating manuals (log: ${logFile})"/>
		<java
				classname="org.apache.tools.ant.Main"
				fork="true"
				failonerror="true"
				dir="${docs.dir}/info/manual"
				>
			<classpath>
				<path refid="log4j.settings"/>
				<path refid="webtestjar.cp"/>
				<path refid="webtestlib.cp"/>
			</classpath>

			<sysproperty key="webtest.home" path="."/>
			<sysproperty key="dest.dir" path="${build.docs}/manual"/>
			<sysproperty key="generated.dir" path="${build.dir}/generated-doc"/>
			<sysproperty key="buildnumber" value="${buildnumber}"/>
			<sysproperty key="manuals.witness" value="${manuals.witness}"/>
			<arg line="-logger org.apache.tools.ant.XmlLogger"/>
			<arg value="-logfile"/>
			<arg path="${logFile}"/>
		</java>
		<available property="manuals.witness.present" file="${manuals.witness}"/>
		<fail if="manuals.witness.present">The manuals generation failed (see log: ${logFile})!</fail>
	</target>

	<target name="apidoc" description="make new API doc if needed"
			depends="fetchDependencies, checkForJavadocChanges" unless="no.javadoc.changes">
		<echo message="Rebuilding api javadoc documentation"/>
		<delete dir="${javadoc.dir}" includeEmptyDirs="true"/>
		<mkdir dir="${javadoc.dir}"/>
		<property name="title" value="Canoo WebTest API"/>
		<property name="package.dir" value="${docs.dir}/package-lists"/>

		<javadoc destdir="${javadoc.dir}" author="true" version="true"
				 windowtitle="${title} (${buildnumber})" doctitle="${title} (${buildnumber})"
				 encoding="ISO-8859-1" useexternalfile="true"
				 footer="Copyright &amp;copy; 2001-2007 Canoo Engineering AG, Basel. All rights reserved.">
			<classpath>
				<path refid="webtestlib.cp"/>
			</classpath>
			<tag name="webtest.step" description="webtest.step" enabled="false"/>
			<tag name="webtest.parameter" description="webtest.parameter" enabled="false"/>
			<tag name="webtest.nested.parameter" description="webtest.parameter" enabled="false"/>
			<tag name="webtest.nested" description="webtest.nested" enabled="false"/>
			<tag name="noinspection" description="noinspection" enabled="false"/>
			<fileset dir="${src.main.dir}">
				<include name="**/*.java"/>
			</fileset>
			<link href="http://java.sun.com/j2se/1.4.2/docs/api"/>
			<link href="http://www.dpml.net/api/ant/1.6.5"/>
			<link href="http://www.junit.org/junit/javadoc/3.8.1"/>
			<link href="http://java.sun.com/products/servlet/2.3/javadoc"/>
		</javadoc>
	</target>

	<target name="zip" description="zip sources, docs and binary distributions">
		<property name="currentCount.file" location="${build.dir}/BuildNumber.txt"/>
		<echo file="${currentCount.file}" append="false" message="${buildnumber}"/>
		<zip description="Store sources to build webtest. Content of build.zip should not be included."
				destfile="${deploy.dir}/src.zip"
				filesonly="true"
				>
			<fileset dir="." includes="${currentCount.file}"/>
			<fileset dir="." includes="build.xml"/>
			<!-- this catch source every where, in src, but also in resource ... -->
			<zipfileset dir="src" prefix="src"/>
			<zipfileset dir="doc/myCustomStep" prefix="doc/myCustomStep"/>
			<zipfileset dir="resources/" prefix="resources" includes="test*.xml"/>
			<zipfileset dir="${docs.dir}" prefix="doc" includes="xdoclet/"/>
			<zipfileset refid="runtime.scripts"/>
		</zip>

		<zip description="Store sources suitable for IDE support."
				destfile="${deploy.dir}/webtest-sources.zip"
				filesonly="true"
				>
			<fileset dir="src/main/java" includes="**/*.java"/>
		</zip>

		<zip description="Store (generated) documentation."
				destfile="${deploy.dir}/doc.zip"
				filesonly="true"
				>
			<fileset dir="." includes="${currentCount.file}"/>
			<zipfileset dir="${build.docs}/manual" prefix="doc/info/manual" includes="*.html"/>
			<zipfileset dir="${javadoc.dir}/" prefix="doc/api"/>
			<zipfileset dir="${docs.dir}" prefix="doc"
						includes="samples/, info/**/*.css, info/**/*.txt, info/**/*.gif, info/*.ico, myCustomStep/"
						excludes="info/manual/**/*.txt, xdoclet/"
					/>
			<zipfileset dir="selftests" prefix="selftests"
						includes="config/, environment/, includes/, reports/readme.txt, tests/"
						excludes="tests/webtest-results/"
					/>
			<fileset refid="runtime.scripts"/>
		</zip>

		<zip description="Store a run-time for webtest."
				destfile="${deploy.dir}/build.zip"
				filesonly="true"
				>
			<fileset dir="." includes="${currentCount.file}"/>
			<zipfileset dir="${docs.dir}" prefix="doc"
						includes="info/*.txt, samples/testfile.html, samples/installTest.xml"
						excludes="info/robots.txt"
					/>
			<!--
						it may be better to rm ${build.runtime} and assemble it again with the correct option,
						so that the directory contains the plain version.
						-->
			<zipfileset dir="${deploy.dir}/plain" prefix="lib" includes="*.jar" />
			<zipfileset dir="${build.runtime}/lib/" prefix="lib" excludes="webtest.jar"/>
			<zipfileset dir="bin/" prefix="bin" filemode="755" includes="webtest.sh, runWebtest.sh" />
			<zipfileset dir="bin/" prefix="bin" includes="webtest.bat, runWebtest.bat" />
			<!-- include some resources used by bin/runWebest.{sh|bat} -->
			<fileset refid="runtime.scripts"/>
		</zip>

		<zip description="Store javadoc, for ibiblio bundle."
				destfile="${deploy.dir}/javadoc.zip"
				filesonly="true"
				>
			<fileset dir="${javadoc.dir}/"/>
		</zip>
		<property name="maven.prefix" value="com/canoo/webtest/webtest/${buildnumber}"/>
		<property name="artifact.prefix" value="${maven.prefix}/webtest-${buildnumber}"/>
		<style in="pom.xml" out="${build.dir}/${artifact.prefix}.pom" style="resources/pom.xsl">
			<param name="version" expression="${buildnumber}"/>
		</style>
		<checksum file="${build.dir}/${artifact.prefix}.pom"/>
		<checksum file="${deploy.dir}/plain/webtest.jar"/>
		<move file="${deploy.dir}/plain/webtest.jar.MD5" tofile="${deploy.dir}/plain/${artifact.prefix}.jar.MD5"/>
		<checksum file="${deploy.dir}/webtest-sources.zip"/>
		<move file="${deploy.dir}/webtest-sources.zip.MD5" tofile="${deploy.dir}/${artifact.prefix}-sources.jar.MD5"/>
		<checksum file="${deploy.dir}/javadoc.zip"/>
		<move file="${deploy.dir}/javadoc.zip.MD5" tofile="${deploy.dir}/${artifact.prefix}-javadoc.jar.MD5"/>
		<checksum>
			<fileset dir="m2/repository" excludes="*.MD5"/>
		</checksum>
		<zip description="WebTest maven bundle"
				destfile="${deploy.dir}/build-maven.zip"
				filesonly="true"
				>
			<fileset dir="${build.dir}" includes="${artifact.prefix}.pom*"/>
			<fileset dir="${deploy.dir}/plain" includes="${artifact.prefix}.jar.*"/>
			<fileset dir="${deploy.dir}" includes="**/${artifact.prefix}-*.jar.MD5"/>
			<fileset dir="${build.dir}" includes="${artifact.prefix}.jar.*"/>
			<zipfileset dir="${deploy.dir}/plain" includes="webtest.jar" fullpath="${artifact.prefix}.jar"/>
			<zipfileset dir="${deploy.dir}" includes="webtest-sources.zip" fullpath="${artifact.prefix}-sources.jar"/>
			<zipfileset dir="${deploy.dir}" includes="javadoc.zip" fullpath="${artifact.prefix}-javadoc.jar"/>
			<zipfileset dir="m2/repository"/>
		</zip>
		<delete>
			<fileset dir="m2/repository" includes="**/*.MD5"/>
		</delete>
	</target>

	<target name="package" description="Package for deployment">
		<antcall target="webTestWar"/>
		<antcall target="releaseTest"/>
	</target>

	<target name="webTestWar" depends="deployMavenSnapshot">
		<war
				destfile="${deploy.dir}/webtest.war"
				webxml="WEB-INF/webtest-web.xml"
				filesonly="true"
				update="false"
				>
			<zipfileset dir="${build.dir}/selftests/reports/" prefix="reports/selftest"/>
			<zipfileset dir="resources/build"
						includes="EmptyWebTestReport.html"
						fullpath="reports/releasetest/index.html"
					/>
			<zipfileset dir="${build.dir}" includes="m2-repo-snapshots/"/>
			<fileset dir="${docs.dir}/info/"/>
			<fileset dir="${build.dir}" includes="log/*.xml"/>
			<fileset dir="resources" includes="log/log.xsl"/>
			<fileset dir="${build.docs}" includes="manual/"/>
			<fileset dir="${build.docs}" includes="junit/"/>
			<fileset dir="${build.docs}" includes="clover/"/>
			<fileset dir="${build.docs}" includes="api/"/>
			<fileset dir="${docs.dir}" includes="samples/"/>
			<fileset dir="${deploy.dir}" includes="*.zip, selftest.war"/>
			<fileset dir="${build.docs}" includes="style/"/>
		</war>
	</target>

	<target name="testWebtestScript" depends="prepareInstallationTestDir"
			description="Tests the webtest.{bat|sh} helper script">
		<property name="cmdLine" location="doc/samples/installTest.xml"/>
		<execWebtest
				line="-f ${cmdLine}"
				dir="${installTest.dir}"
				/>
	</target>
	<!--  ===================================================================== -->

	<target name="testMyCustomStep" depends="prepareInstallationTestDir"
			description="Show how to build and run a custom step">
		<antcall target="runWebappAgainstJetty">
			<param name="webapp.name" value="selftest"/>
			<param name="test.target" value="launchMyCustomStep"/>
		</antcall>
	</target>

	<target name="launchMyCustomStep"
			description="Show how to build and run a custom step (can only work within runWebappAgainstJetty)">

		<property name="myCustomStep.dir" location="${build.dir}/myCustomStep"/>
		<delete dir="${myCustomStep.dir}" includeemptydirs="true"
				description="make sure that dir doesn't contain old stuff"/>
		<mkdir dir="${myCustomStep.dir}" description="create a dedicated dir to run in an 'isolated' way"/>
		<copy todir="${myCustomStep.dir}">
			<fileset dir="doc/myCustomStep/"/>
		</copy>
		<copy todir="${myCustomStep.dir}/src/test/webtest">
			<fileset dir="selftests" includes="environment/server/localhost.properties"/>
		</copy>
		<!-- our demo project uses maven dependency, but the jar is not part of the distribution -->
		<mkdir dir="${myCustomStep.dir}/lib"/>
		<copy file="${maven-ant-tasks-jar}" todir="${myCustomStep.dir}/lib"/>
		<execWebtest dir="${myCustomStep.dir}"/>
	</target>

	<macrodef name="execWebtest" description="Calls the webtest script with a fresh environment">
		<attribute name="line" default="" description="Optional command line for the called webtest"/>
		<attribute name="dir" description="Execution directory"/>
		<sequential>
			<condition property="shellExtension" value="bat">
				<os family="windows"/>
			</condition>
			<condition property="shellExtension" value="sh">
				<os family="unix"/>
			</condition>
			<chmod file="${installTest.dir}/bin/webtest.sh" perm="544"/>
			<exec 
				  dir="@{dir}" executable="${installTest.dir}/bin/webtest.${shellExtension}" failonerror="true"
				  newenvironment="true"
					>
				<env key="PATH" path="${env.PATH}"/>
				<env key="JAVA_HOME" value="${java.home}"/>
				<arg line="@{line}"/>
			</exec>
		</sequential>
	</macrodef>

	<!--  ===================================================================== -->
	<target name="testRunWebtestHelper" depends="prepareInstallationTestDir"
			description="Tests the runWebtest.{bat|sh} helper script">
		<antcall target="runWebappAgainstJetty">
			<param name="webapp.name" value="selftest"/>
			<param name="test.target" value="launchRunWebtestHelper"/>
		</antcall>
	</target>

	<target name="launchRunWebtestHelper"
			description="Tests the runWebtest.{bat|sh} helper script (can only work within runWebappAgainstJetty)">
		<condition property="shellExtension" value="bat">
			<os family="windows"/>
		</condition>
		<condition property="shellExtension" value="sh">
			<os family="unix"/>
		</condition>

		<property name="runWebtest.testdir" value="${build.dir}/runWebtest"/>
		<delete dir="${runWebtest.testdir}" quiet="true"/>
		<mkdir dir="${runWebtest.testdir}" description="create a dedicated dir to run in an 'isolated' way"/>
		<copy file="selftests/tests/withImplicitConfiguration.xml" todir="${runWebtest.testdir}"/>

		<chmod file="${installTest.dir}/bin/runWebtest.sh" perm="544"/>
		<exec dir="${runWebtest.testdir}" executable="${installTest.dir}/bin/runWebtest.${shellExtension}" failonerror="true" newenvironment="true" >
			<env key="PATH" path="${env.PATH}"/>
			<env key="JAVA_HOME" value="${java.home}"/>

			<env key="webtest.host" value="${webtest.host}"/>
			<env key="webtest.port" value="${webtest.port}"/>
			<env key="webtest.basepath" value="${webapp.name}"/>
			<env key="wt.headless" value="yep"/>

			<arg value="withImplicitConfiguration.xml"/>
		</exec>

		<property name="runWebtest.htmlresult" value="${runWebtest.testdir}/webtest-results/index.html"/>
		<fail message="the html result file has not been generated: ${runWebtest.htmlresult}">
			<condition>
				<not>
					<available file="${runWebtest.htmlresult}" type="file"/>
				</not>
			</condition>
		</fail>
	</target>

	<!--  ===================================================================== -->
	<target name="prepareInstallationTestDir" unless="prepareInstallationTestDir.done">
		<mkdir dir="${installTest.dir}"/>
		<unzip src="${deploy.dir}/build.zip" dest="${installTest.dir}"/>
		<chmod file="${installTest.dir}/bin/webtest.sh" perm="744"/>

		<property name="prepareInstallationTestDir.done" value="true"/>
	</target>

	<target name="releaseTest" description="Test the release artifacts">
		<property name="release.test.suite.name" value="releasetests"/>
		<mkdir dir="${build.dir}/${release.test.suite.name}/reports/"/>

		<antcall target="testWebtest_xml"/>

		<antcall target="testWebtestScript"/>

		<antcall target="testMyCustomStep"/>

		<antcall target="testRunWebtestHelper">
			<param name="webtest.home" value="${installTest.dir}"/>
		</antcall>

		<antcall target="runWebappAgainstJetty">
			<param name="test.suite" value="${release.test.suite.name}"/>
			<param name="webapp.name" value="webtest"/>
			<param name="test.target" value="-launchWebTest"/>
			<param name="webtest.home" value="${installTest.dir}"/>
		</antcall>

		<zip
				destfile="${deploy.dir}/webtest.war"
				filesonly="true"
				update="true"
				>
			<zipfileset dir="${build.dir}/${release.test.suite.name}/reports/" prefix="reports/releasetest"/>
		</zip>
	</target>

	<target name="testWebtest_xml" depends="fetchDependencies,prepareInstallationTestDir" description="Tests the utility file webtest.xml">
		<property name="testWebtest_xml.dir" location="${build.dir}/testWebtest_xml"/>
		<property name="testWebtest_xml.createProject.dir" location="${testWebtest_xml.dir}/newProject"/>
		<mkdir dir="${testWebtest_xml.dir}"/>

		<!-- test wt.creatProject -->
		<groovy description="register a custom input handler that automatically answers">
			import org.apache.tools.ant.input.*
			class TestInputHandler implements InputHandler
			{
				void handleInput(InputRequest request)
				{
					request.input = 'newProject'
				}
			}
			project.references['tmp.originalInputHandler'] = project.inputHandler // save to restore later
			project.inputHandler = new TestInputHandler()
		</groovy>
		<ant antfile="${installTest.dir}/webtest.xml" dir="${testWebtest_xml.dir}" target="wt.createProject">
			<property name="user.dir" value="${testWebtest_xml.dir}"/>
		</ant>
		<groovy description="restore original input handler">
			project.inputHandler = project.references['tmp.originalInputHandler']
		</groovy>
	    <property name="dest.dir" location="dest"/>
	    <uptodate property="testWebtest_xml.createdeProjectOk">
	    	<srcfiles dir="${testWebtest_xml.createProject.dir}" includes="**/*"/>
	    	<globmapper from="*" to="*"/>
	    </uptodate>
		<fail unless="testWebtest_xml.createdeProjectOk">
			webtest.xml's wt.createProject didn't copy the right files
		</fail>
		
	</target>

	<!-- install the webtest webapp distribution    -->
	<!-- suppress for local builds                  -->

	<target name="deployWeb" description="deploy webtest to the distribution server"
			if="webtest.deploy">
		<delete file="${webtest.server.webapp.dir}/webtest.war"/>
		<delete dir="${webtest.server.webapp.dir}/webtest"/>
		<copy file="${deploy.dir}/webtest.war" toDir="${webtest.server.webapp.dir}"/>
		<antcall target="mayUnWarWebtest"/>
		<antcall target="checkWebServerDeployment"/>
	</target>


	<target name="mayUnWarWebtest" if="server.unwar">
		<property name="exploded.dir" location="${webtest.server.webapp.dir}/webtest"/>
		<delete dir="${exploded.dir}" quiet="true"/>
		<mkdir dir="${exploded.dir}"/>
		<unwar src="${webtest.server.webapp.dir}/webtest.war" dest="${exploded.dir}"/>
	</target>

	<!--  ===================================================================== -->
	<!--  Check if the server is running by getting the default page            -->
	<!--  ===================================================================== -->

	<target name="checkWebServerDeployment" depends="mayRestart">
		<waitfor maxwait="30" maxwaitunit="second" timeoutproperty="deploymentWebServerNotRunning">
			<http url="${webtest.server.check.url}"/>
		</waitfor>
		<fail if="deploymentWebServerNotRunning">Deployment server is not available.</fail>
	</target>

	<target name="mayRestart" if="server.restart">
		<exec dir="${server.restart.dir}" executable="${server.restart.command}" failonerror="off"/>
	</target>


	<target name="deployMavenSnapshot" depends="compile.plain, zip" description="Deploys jars to a local folder">
		<property name="deploy-mvn-local.dir" location="${build.dir}/m2-repo-snapshots"/>
		<echo message="Deploying locally to ${deploy-mvn-local.dir}"/>
		<mkdir dir="${deploy-mvn-local.dir}"/>
		<artifact:deploy file="${deploy.dir}/plain/webtest.jar">
			<remoteRepository url="file://${deploy-mvn-local.dir}"/>
			<pom refid="maven.project"/>
			<attach file="${deploy.dir}/webtest-sources.zip" classifier="sources" /> 
		</artifact:deploy>
	</target>
</project>
